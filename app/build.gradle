buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.0'
        // Assists in working with annotation processors for Android Studio.
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'me.tatarka:gradle-retrolambda:3.5.0'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'jacoco'
apply plugin: 'realm-android'
apply from: '../config/quality.gradle'

def versionMajor = 0
def versionMinor = 0
def versionPatch = 1

def buildTime = new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        // FIXME Replace with your app's package name
        applicationId "com.kaciula.archiman"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        // FIXME: Create your own keystore with secret keys and passwords
        release {
            storeFile file("key/archiman.jks")
            storePassword 'Archiman987'
            keyAlias 'archiman.key'
            keyPassword 'Archiman987'
        }
    }

    // FIXME Replace with your app's package name followed by fileprovider
    final FILE_PROVIDER_DEBUG = "com.kaciula.archiman.fileprovider"
    final FILE_PROVIDER_AUTHORITY = "FILE_PROVIDER_AUTHORITY"

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev-" + buildTime
            testCoverageEnabled false

            buildConfigField "String", FILE_PROVIDER_AUTHORITY, "\"" + FILE_PROVIDER_DEBUG + "\""
            manifestPlaceholders = [fileProviderAuthority: FILE_PROVIDER_DEBUG]
        }
    }
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {
        }
    }
    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def oldFile = output.outputFile
            // FIXME Replace with your app's name
            def newName = "Archiman-" + "${variant.versionName}.apk"
            output.outputFile = new File(oldFile.parent, newName)
        }
    }
}

dependencies {
    final SUPPORT_LIBRARY_VERSION = '25.0.0'
    final DAGGER_VERSION = '2.5'
    final LEAK_CANARY_VERSION = '1.4-beta2'
    final BUTTER_KNIFE_VERSION = '8.1.0'
    final RETROFIT_VERSION = '2.1.0'
    final OKHTTP_VERSION = '3.4.1'
    final RXJAVA_VERSION = '2.0.1'
    final CONDUCTOR_VERSION = '2.0.5'
    final DEBUG_DRAWER = '0.7.0'
    final RUNNER_VERSION = '0.5'
    final JODA_TIME_ANDROID_VERSION = '2.9.5.1'
    final JODA_TIME_VERSION = '2.9.7'
    final STETHO_VERSION = '1.4.2'

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:design:$SUPPORT_LIBRARY_VERSION"

    compile 'com.jakewharton.timber:timber:4.1.2'
    compile "com.jakewharton:butterknife:$BUTTER_KNIFE_VERSION"
    apt "com.jakewharton:butterknife-compiler:$BUTTER_KNIFE_VERSION"

    compile "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    compile "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
    compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0"

    compile "com.squareup.okhttp3:okhttp:$OKHTTP_VERSION"

    compile "com.google.dagger:dagger:$DAGGER_VERSION"
    provided 'org.glassfish:javax.annotation:10.0-b28' //Required by Dagger2
    apt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"

    compile "io.reactivex.rxjava2:rxjava:$RXJAVA_VERSION"
    compile "io.reactivex.rxjava2:rxandroid:$RXJAVA_VERSION"

    provided 'com.google.auto.value:auto-value:1.3'
    apt 'com.google.auto.value:auto-value:1.3'
    provided 'com.ryanharter.auto.value:auto-value-parcel:0.2.4-rc2'
    apt 'com.ryanharter.auto.value:auto-value-parcel:0.2.4-rc2'
    apt 'com.ryanharter.auto.value:auto-value-gson:0.4.4'
    provided 'com.ryanharter.auto.value:auto-value-gson:0.4.4'

    compile "com.bluelinelabs:conductor:$CONDUCTOR_VERSION"
    compile "com.bluelinelabs:conductor-support:$CONDUCTOR_VERSION"
    compile "com.bluelinelabs:conductor-rxlifecycle2:$CONDUCTOR_VERSION"

    compile('com.crashlytics.sdk.android:crashlytics:2.6.0@aar') {
        transitive = true;
    }
    compile 'com.google.code.gson:gson:2.7'
    compile "net.danlew:android.joda:$JODA_TIME_ANDROID_VERSION"
    compile 'com.dmitrymalkovich.android:material-design-dimens:1.2'

    compile 'net.sourceforge.findbugs:annotations:1.3.2'
    compile "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"

    // Debug only dependencies
    debugCompile "com.squareup.leakcanary:leakcanary-android:$LEAK_CANARY_VERSION"
    debugCompile 'com.squareup.haha:haha:2.0.3'

    debugCompile 'com.amitshekhar.android:debug-db:0.4.0'
    debugCompile "io.palaima.debugdrawer:debugdrawer:$DEBUG_DRAWER"
    debugCompile "io.palaima.debugdrawer:debugdrawer-commons:$DEBUG_DRAWER"
    debugCompile "io.palaima.debugdrawer:debugdrawer-actions:$DEBUG_DRAWER"
    debugCompile 'jp.wasabeef:takt:1.0.3'
    debugCompile "com.squareup.okhttp3:logging-interceptor:$OKHTTP_VERSION"
    debugCompile 'com.github.simonpercic:oklog3:2.0.0'

    debugCompile "com.facebook.stetho:stetho:$STETHO_VERSION"
    debugCompile("com.facebook.stetho:stetho-okhttp3:$STETHO_VERSION") {
        exclude group: 'com.squareup.okhttp3'
    }
    debugCompile("com.facebook.stetho:stetho-timber:$STETHO_VERSION") {
        exclude group: 'com.jakewharton.timber'
    }

    // Unit testing dependencies.
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile "joda-time:joda-time:$JODA_TIME_VERSION"

    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    androidTestCompile "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    androidTestCompile "com.android.support.test:runner:$RUNNER_VERSION"
    androidTestCompile "com.android.support.test:rules:$RUNNER_VERSION"
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'tools.fastlane:screengrab:0.5.6'
    androidTestCompile "com.google.code.findbugs:jsr305:3.0.1"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testProdDebugUnitTest', 'createProdDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/prod/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testProdDebugUnitTest.exec", "outputs/code-coverage/connected/*coverage.ec"
    ])
}